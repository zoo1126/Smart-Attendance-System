# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'getdailyAttendance.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import datetime
from PyQt5.QtWidgets import QMessageBox
from sql.company import *
from sql.dailyAttendance_sql import *
from entity.dailyAttendance_entity import *
from codes.dailyAttendance_op import *
from sql.department import *

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(948, 603)
        self.gridLayout_3 = QtWidgets.QGridLayout(Form)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(-1, 0, -1, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(10, 0, 10, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget_2 = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.widget_2.setFont(font)
        self.widget_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget_2.setObjectName("widget_2")
        self.gridLayout = QtWidgets.QGridLayout(self.widget_2)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_3 = QtWidgets.QRadioButton(self.widget_2)
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setObjectName("radioButton_3")
        self.buttonGroup = QtWidgets.QButtonGroup(Form)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.radioButton_3)
        self.gridLayout.addWidget(self.radioButton_3, 3, 1, 1, 1)
        self.radioButton_2 = QtWidgets.QRadioButton(self.widget_2)
        self.radioButton_2.setObjectName("radioButton_2")
        self.buttonGroup.addButton(self.radioButton_2)
        self.gridLayout.addWidget(self.radioButton_2, 3, 5, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(self.widget_2)
        self.radioButton.setObjectName("radioButton")
        self.buttonGroup.addButton(self.radioButton)
        self.buttonGroup.buttonClicked.connect(self.changeSorting)

        self.gridLayout.addWidget(self.radioButton, 3, 3, 1, 1)
        self.line_3 = QtWidgets.QFrame(self.widget_2)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.gridLayout.addWidget(self.line_3, 3, 2, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.widget_2)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 3, 0, 1, 1)
        self.line_4 = QtWidgets.QFrame(self.widget_2)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.gridLayout.addWidget(self.line_4, 3, 4, 1, 1)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setObjectName("widget_3")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.widget_3)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_2 = QtWidgets.QLabel(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_2, 0, 4, 1, 1)
        self.line = QtWidgets.QFrame(self.widget_3)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_4.addWidget(self.line, 0, 8, 1, 1)
        self.label = QtWidgets.QLabel(self.widget_3)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 0, 0, 1, 1)
        self.dateEdit_2 = QtWidgets.QDateEdit(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dateEdit_2.sizePolicy().hasHeightForWidth())
        self.dateEdit_2.setSizePolicy(sizePolicy)
        self.dateEdit_2.setCalendarPopup(True)
        self.dateEdit_2.setObjectName("dateEdit_2")
        self.gridLayout_4.addWidget(self.dateEdit_2, 0, 7, 1, 1)
        self.dateEdit = QtWidgets.QDateEdit(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dateEdit.sizePolicy().hasHeightForWidth())
        self.dateEdit.setSizePolicy(sizePolicy)
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.gridLayout_4.addWidget(self.dateEdit, 0, 5, 1, 1)
        self.dateEdit.setDate(QtCore.QDate.currentDate())
        date = self.dateEdit.date().toString('yyyy-MM-dd')
        self.dateEdit_2.setMinimumDate(QtCore.QDate.fromString(date, 'yyyy-MM-dd'))
        self.dateEdit.lineEdit().setVisible(False)
        self.dateEdit_2.lineEdit().setVisible(False)
        self.dateEdit.dateChanged.connect(self.onDateChanged)
        self.label_6 = QtWidgets.QLabel(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_4.addWidget(self.label_6, 0, 6, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.widget_3)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.gridLayout_4.addWidget(self.comboBox, 0, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.widget_3)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_4.addWidget(self.lineEdit, 0, 3, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
"    background-color:green;\n"
"    color:white;\n"
"    border-radius:8px;\n"
"    border:2px groove gray;\n"
"    border-style:outset;\n"
"}")
        self.pushButton.setCheckable(True)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton, 0, 9, 1, 1)
        self.pushButton.clicked.connect(self.search)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("QPushButton{\n"
"    background-color:orange;\n"
"    color:white;\n"
"    border-radius:8px;\n"
"    border:2px groove gray;\n"
"    border-style:outset;\n"
"}")
        self.pushButton_2.setCheckable(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.resetSelection)
        self.gridLayout_4.addWidget(self.pushButton_2, 0, 10, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.widget_3)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_4.addWidget(self.label_3, 0, 2, 1, 1)
        self.verticalLayout.addWidget(self.widget_3, 0, QtCore.Qt.AlignLeft)
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setObjectName("tableWidget")

        self.tableWidget.setColumnCount(8)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        self.tableWidget.setSortingEnabled(True)
        self.verticalLayout.addWidget(self.tableWidget)
        self.widget_4 = QtWidgets.QWidget(self.widget)
        self.widget_4.setObjectName("widget_4")

        self.verticalLayout.addWidget(self.widget_4)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.widget)
        self.gridLayout_3.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.sort_all()
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.radioButton_3.setText(_translate("Form", "按公司全部记录查询"))
        self.radioButton_2.setText(_translate("Form", "按员工信息查询"))
        self.radioButton.setText(_translate("Form", "按部门查询"))
        self.label_2.setText(_translate("Form", "查询时间"))
        self.label.setText(_translate("Form", "部门"))
        self.dateEdit_2.setDisplayFormat(_translate("Form", "yyyy-M-d"))
        self.dateEdit.setDisplayFormat(_translate("Form", "yyyy-M-d"))
        self.label_6.setText(_translate("Form", "至"))
        self.comboBox.setItemText(0, _translate("Form", "全部"))
        self.pushButton.setText(_translate("Form", "搜索"))
        self.pushButton_2.setText(_translate("Form", "重置"))
        self.label_3.setText(_translate("Form", "员工手机号/姓名"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "操作"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "考勤编号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "员工手机号"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "员工姓名"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "所在部门编号"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "所在部门名称"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "打卡时间"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Form", "考勤状态"))




    def changeSorting(self):
        currentradiobutton=self.buttonGroup.checkedButton()
        if currentradiobutton==self.radioButton:

            self.sort_depart()
        elif currentradiobutton==self.radioButton_2:

            self.sort_individual()
        else:
            self.sort_all()

    def gettablewidget(self):
        return self.tableWidget

    def sethr_phone(self, hr_phone):
        self.hr_phone = hr_phone
        self.com_id = findCom_idbyhr_id(self.hr_phone)[0][0]
        #self.widget_3.setcom_id(self.com_id)

    def gethr_phone(self):
        return self.hr_phone

    def getcom_id(self):
        return findCom_idbyhr_id(self.hr_phone)[0][0]

    def showAllattendance_table(self):
        self.tableWidget.clearContents()
        com_id = self.getcom_id()
        att_list = findAllDailyAtt(com_id)
        self.tableWidget.setRowCount(len(att_list))

        x = 0

        for onedep in att_list:

            self.tableWidget.setCellWidget(x, 0, self.buttonForRow(True))

            item = QtWidgets.QTableWidgetItem(onedep.gets_Phone())
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 2, item)
            item = QtWidgets.QTableWidgetItem(onedep.gets_Name())
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 3, item)
            depiditem = QtWidgets.QTableWidgetItem(str(onedep.gets_Depid()))
            #depiditem.setData(QtCore.Qt.DisplayRole, onedep.gets_Depid())
            depiditem.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 4, depiditem)
            item = QtWidgets.QTableWidgetItem(onedep.gets_Depname())
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 5, item)
            item = QtWidgets.QTableWidgetItem(str(onedep.getDatetime()))
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 6, item)
            if onedep.getAttState()==1:
                item = QtWidgets.QTableWidgetItem("已打卡")
            elif onedep.getAttState()==2:
                item = QtWidgets.QTableWidgetItem("迟到")
            elif onedep.getAttState() == 3:
                item = QtWidgets.QTableWidgetItem("请假")
            elif onedep.getAttState()==4:
                item = QtWidgets.QTableWidgetItem("外勤")
            else:
                item = QtWidgets.QTableWidgetItem("未打卡")
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 7, item)
            iditem = QtWidgets.QTableWidgetItem()
            iditem.setData(QtCore.Qt.DisplayRole, onedep.getId())
            iditem.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(x, 1, iditem)
            x = x + 1
        self.tableWidget.sortByColumn(1, Qt.AscendingOrder)

    def showselectOneatt_table(self,row,oneatt):
        self.tableWidget.setCellWidget(row, 0, self.buttonForRow(True))
        item = QtWidgets.QTableWidgetItem()
        item.setData(QtCore.Qt.DisplayRole, oneatt.getId())
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 1, item)
        item = QtWidgets.QTableWidgetItem(oneatt.gets_Phone())
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 2, item)
        item = QtWidgets.QTableWidgetItem(oneatt.gets_Name())
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setData(QtCore.Qt.DisplayRole, oneatt.gets_Depid())
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 4, item)
        item = QtWidgets.QTableWidgetItem(oneatt.gets_Depname())
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 5, item)
        item = QtWidgets.QTableWidgetItem(str(oneatt.getDatetime()))
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 6, item)
        if oneatt.getAttState() == 1:
            item = QtWidgets.QTableWidgetItem("已打卡")
        elif oneatt.getAttState() == 2:
            item = QtWidgets.QTableWidgetItem("迟到")
        elif oneatt.getAttState() == 3:
            item = QtWidgets.QTableWidgetItem("请假")
        elif oneatt.getAttState() == 4:
            item = QtWidgets.QTableWidgetItem("外勤")
        else:
            item = QtWidgets.QTableWidgetItem("未打卡")
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        self.tableWidget.setItem(row, 7, item)

    def showselectManyatt_table(self,att_list):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(len(att_list))
        row=0
        for oneatt in att_list:
            id=oneatt.getId()
            name=oneatt.gets_Name()
            phone=oneatt.gets_Phone()
            depname=oneatt.gets_Depname()
            depid=oneatt.gets_Depid()
            datetime=str(oneatt.getDatetime())
            state=oneatt.getAttState()
            self.tableWidget.setCellWidget(row, 0, self.buttonForRow(True))
            item = QtWidgets.QTableWidgetItem(phone)
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 2, item)
            item = QtWidgets.QTableWidgetItem(name)
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 3, item)
            depiditem = QtWidgets.QTableWidgetItem(str(depid))
            #depiditem.setData(QtCore.Qt.DisplayRole, depid)
            depiditem.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 4, depiditem)
            item = QtWidgets.QTableWidgetItem(depname)
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 5, item)
            item = QtWidgets.QTableWidgetItem(datetime)
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 6, item)
            if state == 1:
                item = QtWidgets.QTableWidgetItem("已打卡")
            elif state == 2:
                item = QtWidgets.QTableWidgetItem("迟到")
            elif state == 3:
                item = QtWidgets.QTableWidgetItem("请假")
            elif state == 4:
                item = QtWidgets.QTableWidgetItem("外勤")
            else:
                item = QtWidgets.QTableWidgetItem("未打卡")
            item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 7, item)
            iditem = QtWidgets.QTableWidgetItem()
            iditem.setData(QtCore.Qt.DisplayRole, id)
            iditem.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, 1, iditem)



            row = row + 1
        self.tableWidget.sortByColumn(1, Qt.AscendingOrder)

    def buttonForRow(self, issaved):

        widget = QtWidgets.QWidget()
        hLayout = QtWidgets.QHBoxLayout()
        # 修改
        if issaved==True:
            self.updateBtn = QtWidgets.QPushButton('编辑')
            self.updateBtn.setStyleSheet(''' text-align : center;
                                                  background-color : NavajoWhite;
                                                  height : 30px;
                                                  border-style: outset;
                                                  font : 13px  ''')
            self.updateBtn.clicked.connect(self.UpdateButton)
            # 删除
            self.deleteBtn = QtWidgets.QPushButton('移除')
            self.deleteBtn.setStyleSheet(''' text-align : center;
                                            background-color : LightCoral;
                                            height : 30px;
                                            border-style: outset;
                                            font : 13px; ''')

            self.deleteBtn.clicked.connect(self.DeleteButton)
            hLayout.addWidget(self.updateBtn)
            hLayout.addWidget(self.deleteBtn)
            hLayout.setContentsMargins(5, 2, 5, 2)
        else:
            self.saveBtn = QtWidgets.QPushButton('保存')
            self.saveBtn.setStyleSheet(''' text-align : center;
                                                                background-color : NavajoWhite;
                                                                height : 30px;
                                                                border-style: outset;
                                                                font : 13px; ''')

            self.saveBtn.clicked.connect(self.SaveButton)
            self.cancelBtn = QtWidgets.QPushButton('取消')
            self.cancelBtn.setStyleSheet(''' text-align : center;
                                                                            background-color : LightCoral;
                                                                            height : 30px;
                                                                            border-style: outset;
                                                                            font : 13px; ''')

            self.cancelBtn.clicked.connect(self.CancelButton)
            hLayout.addWidget(self.saveBtn)
            hLayout.addWidget(self.cancelBtn)
            hLayout.setContentsMargins(5, 2, 5, 2)

        widget.setLayout(hLayout)
        return widget

    def datetimeedit(self,datetime):
        t=datetime.split(' ')
        date=t[0]
        time=t[1]
        date_list=date.split('-')
        time_list=time.split(':')
        self.datetimeEdit=QtWidgets.QDateTimeEdit()

        self.datetimeEdit.setDisplayFormat('yyyy-MM-dd HH:mm:ss')
        self.datetimeEdit.setVisible(True)
        self.datetimeEdit.setDateTime(QtCore.QDateTime(int(date_list[0]), int(date_list[1]), int(date_list[2]), int(time_list[0]), int(time_list[1]), int(time_list[2])))
        self.datetimeEdit.setMinimumDateTime(QtCore.QDateTime(1759, 1, 1, 00, 00, 00))
        self.datetimeEdit.setMaximumDateTime(QtCore.QDateTime(2100, 12, 31, 23, 59, 59))
        return self.datetimeEdit

    def att_comboBoxedit(self,currenttext):
        self.att_comboBox=QtWidgets.QComboBox()
        self.att_comboBox.addItem('已打卡')
        self.att_comboBox.addItem('迟到')
        self.att_comboBox.addItem('请假')
        self.att_comboBox.addItem('外勤')
        self.att_comboBox.setCurrentText(currenttext)

        return self.att_comboBox


    def DeleteButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            res = QMessageBox.question(self, '移除', '确定移除该条记录吗？', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if res == QMessageBox.No:
                return
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            att_id = self.tableWidget.item(row, 1).text()
            res = deleteDailyAtt(att_id)
            print(res)
            if res:
                self.tableWidget.removeRow(row)
            else:
                print("error delete")

#修改的时候只有打卡时间和打卡状态需要更改
    def UpdateButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            self.tableWidget.setCellWidget(row, 0, self.buttonForRow(False))
            self.tableWidget.setCellWidget(row, 6, self.datetimeedit(self.tableWidget.item(row,6).text()))
            self.tableWidget.setCellWidget(row, 7, self.att_comboBoxedit(self.tableWidget.item(row,7).text()))
            self.oldatt = dailyAttendance()
            self.oldatt.setcomid(self.getcom_id())
            self.oldatt.setId(self.tableWidget.item(row, 1).text())
            self.oldatt.sets_Phone(self.tableWidget.item(row, 2).text())
            self.oldatt.setDatetime(self.tableWidget.item(row, 6).text())
            self.oldatt.setAttState(self.tableWidget.item(row, 7).text())

    def SaveButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            datetime=self.tableWidget.cellWidget(row,6).dateTime().toString('yyyy-MM-dd HH:mm:ss')
            comboselect=self.tableWidget.cellWidget(row,7).currentText()
            self.newatt = dailyAttendance()
            self.newatt.setcomid(self.getcom_id())
            self.newatt.setId(self.tableWidget.item(row, 1).text())
            self.newatt.sets_Phone(self.tableWidget.item(row, 2).text())
            self.newatt.setDatetime(datetime)
            self.newatt.setAttState(comboselect)
            if updatedailyAttendance(self.oldatt, self.newatt):
                self.tableWidget.setCellWidget(row, 0, self.buttonForRow(True))
                print(self.newatt.getId())
                attone=findDailyAttbyId(self.newatt.getId(), self.getcom_id())
                self.showselectOneatt_table(row,attone)
                self.tableWidget.removeCellWidget(row,6)
                self.tableWidget.removeCellWidget(row,7)
            else:
                QMessageBox.warning(self, '失败', '考勤记录更新失败！',QMessageBox.Yes)

    def CancelButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            attone = findDailyAttbyId(self.oldatt.getId(), self.getcom_id())
            self.showselectOneatt_table(row, attone)

    def resetSelection(self):
        self.dateEdit.setDate(QtCore.QDate.currentDate())
        self.dateEdit_2.setDate(QtCore.QDate.currentDate())
        self.dateEdit.lineEdit().setVisible(False)
        self.dateEdit_2.lineEdit().setVisible(False)
        self.dateEdit.setDate(QtCore.QDate.currentDate())
        date = self.dateEdit.date().toString('yyyy-MM-dd')
        self.dateEdit_2.setMinimumDate(QtCore.QDate.fromString(date, 'yyyy-MM-dd'))
        if self.comboBox.isVisible():
            self.comboBox.setCurrentIndex(0)
        if self.lineEdit.isVisible():
            self.lineEdit.setText(None)

    def onDateChanged(self):
        self.dateEdit.lineEdit().setVisible(True)
        self.dateEdit_2.lineEdit().setVisible(True)
        date = self.dateEdit.date().toString('yyyy-MM-dd')
        self.dateEdit_2.setMinimumDate(QtCore.QDate.fromString(date, 'yyyy-MM-dd'))

    def search(self):

        if self.comboBox.isVisible():
            if self.comboBox.currentText()!="全部" and self.dateEdit.lineEdit().isVisible():
                startdatetime=self.dateEdit.date().toString('yyyy-MM-dd')+' 00:00:00'
                enddatetime=self.dateEdit_2.date().toString('yyyy-MM-dd')+' 23:59:59'
                depname=self.comboBox.currentText()
                att_list=findDailyAttbydatetime_and_dep(startdatetime,enddatetime,depname,self.getcom_id())
                self.showselectManyatt_table(att_list)
            elif self.comboBox.currentText()!="全部" and not self.dateEdit.lineEdit().isVisible():
                depname = self.comboBox.currentText()
                att_list = findDailyAttbydep(depname, self.getcom_id())
                self.showselectManyatt_table(att_list)
            elif self.comboBox.currentText()=="全部" and self.dateEdit.lineEdit().isVisible():
                startdatetime = self.dateEdit.date().toString('yyyy-MM-dd') + ' 00:00:00'
                enddatetime = self.dateEdit_2.date().toString('yyyy-MM-dd') + ' 23:59:59'
                att_list = findDailyAttbydatetime(startdatetime, enddatetime,  self.getcom_id())
                self.showselectManyatt_table(att_list)
            else:
                self.showAllattendance_table()
        elif self.lineEdit.isVisible():
            if (self.lineEdit.text() is None or len(self.lineEdit.text())==0) and self.dateEdit.lineEdit().isVisible():
                startdatetime = self.dateEdit.date().toString('yyyy-MM-dd') + ' 00:00:00'
                enddatetime = self.dateEdit_2.date().toString('yyyy-MM-dd') + ' 23:59:59'
                att_list = findDailyAttbydatetime(startdatetime, enddatetime, self.getcom_id())
                self.showselectManyatt_table(att_list)
            elif self.lineEdit.text() is not None and len(self.lineEdit.text())!=0 and self.dateEdit.lineEdit().isVisible():
                startdatetime = self.dateEdit.date().toString('yyyy-MM-dd') + ' 00:00:00'
                enddatetime = self.dateEdit_2.date().toString('yyyy-MM-dd') + ' 23:59:59'
                print(startdatetime)
                phone_or_name = self.lineEdit.text()
                att_list = findDailyAttbyphoneorname_and_datetime(phone_or_name,startdatetime, enddatetime, self.getcom_id())
                self.showselectManyatt_table(att_list)
            elif self.lineEdit.text() is not None and len(self.lineEdit.text())!=0 and not self.dateEdit.lineEdit().isVisible():
                phone_or_name=self.lineEdit.text()
                att_list = findDailyAttbyphoneorname(phone_or_name, self.getcom_id())
                self.showselectManyatt_table(att_list)
            else:
                self.showAllattendance_table()
        else:
            if not self.dateEdit.lineEdit().isVisible():
                self.showAllattendance_table()
            else:
                startdatetime = self.dateEdit.date().toString('yyyy-MM-dd') + ' 00:00:00'
                enddatetime = self.dateEdit_2.date().toString('yyyy-MM-dd') + ' 23:59:59'
                att_list = findDailyAttbydatetime(startdatetime, enddatetime, self.getcom_id())
                self.showselectManyatt_table(att_list)



    def sort_depart(self):
        self.label.setVisible(True)
        self.comboBox.setVisible(True)
        self.label_3.setVisible(False)
        self.lineEdit.setVisible(False)
        self.gridLayout_4.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout_4.addWidget(self.comboBox, 0, 1, 1, 1)
        self.gridLayout_4.addWidget(self.label_2, 0, 2, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit, 0, 3, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit_2, 0, 5, 1, 1)
        self.gridLayout_4.addWidget(self.label_6, 0, 4, 1, 1)
        self.gridLayout_4.addWidget(self.line, 0, 6, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton, 0, 7, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton_2, 0, 8, 1, 1)
        dep_list = findDeps(self.getcom_id())
        for onedep in dep_list:
            self.comboBox.addItem(onedep[2])

    def sort_individual(self):
        self.label.setVisible(False)
        self.comboBox.setVisible(False)
        self.label_3.setVisible(True)
        self.lineEdit.setVisible(True)
        self.gridLayout_4.addWidget(self.label_3, 0, 0, 1, 1)
        self.gridLayout_4.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.gridLayout_4.addWidget(self.label_2, 0, 2, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit, 0, 3, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit_2, 0, 5, 1, 1)
        self.gridLayout_4.addWidget(self.label_6, 0, 4, 1, 1)
        self.gridLayout_4.addWidget(self.line, 0, 6, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton, 0, 7, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton_2, 0, 8, 1, 1)

    def sort_all(self):
        self.label.setVisible(False)
        self.comboBox.setVisible(False)
        self.label_3.setVisible(False)
        self.lineEdit.setVisible(False)
        self.gridLayout_4.addWidget(self.label_2, 0, 0, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit, 0, 1, 1, 1)
        self.gridLayout_4.addWidget(self.dateEdit_2, 0, 3, 1, 1)
        self.gridLayout_4.addWidget(self.label_6, 0, 2, 1, 1)
        self.gridLayout_4.addWidget(self.line, 0, 4, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton, 0, 5, 1, 1)
        self.gridLayout_4.addWidget(self.pushButton_2, 0, 6, 1, 1)
