# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'out_apply.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from sql.out_apply_sql import *
from sql.company import *
from sql.department import *
from sql.staff_sql import *
from PyQt5.QtGui import QValidator,QRegExpValidator
from PyQt5.QtCore import QRegExp
import datetime
from sql.dailyAttendance_sql import *
from PyQt5.QtWidgets import QMessageBox

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(942, 569)
        self.gridLayout_3 = QtWidgets.QGridLayout(Form)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.widget_3 = QtWidgets.QWidget(Form)
        self.widget_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget_3.setObjectName("widget_3")

        self.gridLayout_3.addWidget(self.widget_3, 1, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.widget.setFont(font)
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setObjectName("gridLayout")
        self.enddate = QtWidgets.QDateEdit(self.widget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.enddate.setFont(font)
        self.enddate.setStyleSheet("QDateEdit{\n"
"    border-radius:5px;\n"
"    border:1px groove gray;    \n"
"    border-style:outset;\n"
"}")
        self.enddate.setAccelerated(False)
        self.enddate.setCalendarPopup(True)
        self.enddate.setCurrentSectionIndex(0)
        self.enddate.setObjectName("enddate")
        self.enddate.lineEdit().setVisible(False)
        self.gridLayout.addWidget(self.enddate, 3, 7, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 3, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 3, 6, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 4, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setStyleSheet("QComboBox{\n"
"    border-radius:5px;\n"
"    border:1px groove gray;    \n"
"    border-style:outset;\n"
"}")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout.addWidget(self.comboBox, 3, 3, 1, 1)
        self.startdate = QtWidgets.QDateEdit(self.widget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.startdate.setFont(font)
        self.startdate.setStyleSheet("QDateEdit{\n"
"    border-radius:5px;\n"
"    border:1px groove gray;    \n"
"    border-style:outset;\n"
"}")
        self.startdate.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(1752, 9, 14), QtCore.QTime(0, 0, 0)))
        self.startdate.setCalendarPopup(True)
        self.startdate.lineEdit().setVisible(False)
        self.startdate.dateChanged.connect(self.onDateChanged)
        self.startdate.setObjectName("startdate")
        self.gridLayout.addWidget(self.startdate, 3, 5, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setStyleSheet("QPushButton{\n"
"    background-color:green;\n"
"    color:white;\n"
"    border-radius:8px;\n"
"    border:2px groove gray;\n"
"    border-style:outset;\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.searchfornotext)
        self.gridLayout.addWidget(self.pushButton_3, 3, 8, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setStyleSheet("QPushButton{\n"
"    background-color:orange;\n"
"    color:white;\n"
"    border-radius:8px;\n"
"    border:2px groove gray;\n"
"    border-style:outset;\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 3, 9, 1, 1)
        self.pushButton_4.clicked.connect(self.resetSelection)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.widget_2.setFont(font)
        self.widget_2.setObjectName("widget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.lineEdit = QtWidgets.QLineEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("QLineEdit{\n"
"    border-radius:5px;\n"
"    border:1px groove gray;    \n"
"    border-style:outset;\n"
"}")
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 0, 1, 1, 1)
        reg = QRegExp('[1][35678][0-9]{9}$')
        vali = QRegExpValidator(self)
        vali.setRegExp(reg)
        self.lineEdit.setValidator(vali)
        self.label = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.widget_2)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
"    background-color:green;\n"
"    color:white;\n"
"    border-radius:8px;\n"
"    border:2px groove gray;\n"
"    border-style:outset;\n"
"}")
        self.pushButton.setCheckable(True)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.searchfortext)
        self.gridLayout_2.addWidget(self.pushButton, 0, 2, 1, 1)
        self.verticalLayout.addWidget(self.widget_2)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(9)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        self.verticalLayout.addWidget(self.tableWidget)
        self.gridLayout_3.addLayout(self.verticalLayout, 0, 0, 1, 1)

        self.retranslateUi(Form)
        self.startdate.dateChanged['QDate'].connect(self.enddate.setDate) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))

        self.enddate.setDisplayFormat(_translate("Form", "yyyy-M-d"))
        self.label_2.setText(_translate("Form", "外勤申请状态"))
        self.label_5.setText(_translate("Form", "至"))
        self.label_3.setText(_translate("Form", "申请日期"))
        self.comboBox.setItemText(0, _translate("Form", "全部"))
        self.comboBox.setItemText(1, _translate("Form", "未处理"))
        self.comboBox.setItemText(2, _translate("Form", "已同意"))
        self.comboBox.setItemText(3, _translate("Form", "已拒绝"))
        self.startdate.setDisplayFormat(_translate("Form", "yyyy-M-d"))
        self.pushButton_3.setText(_translate("Form", "搜索"))
        self.pushButton_4.setText(_translate("Form", "重置"))
        self.label.setText(_translate("Form", "手机号码"))
        self.pushButton.setText(_translate("Form", "搜索"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "操作"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "申请编号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "员工手机号"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "申请时间"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "需求"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "处理状态"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "外勤开始时间"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Form", "外勤结束时间"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Form", "处理人工号"))

    def sethr_phone(self,hr_phone):
        self.hr_phone=hr_phone

    def gethr_phone(self):
        return self.hr_phone
    def sethr_id(self,hr_id):
        self.hr_id=hr_id

    def gethr_id(self):
        return self.hr_id

    def getcom_id(self):
        return findCom_idbyhr_id(self.hr_phone)[0][0]

    def gettablewidget(self):
        return self.tableWidget

    def onDateChanged(self):
        self.startdate.lineEdit().setVisible(True)
        self.enddate.lineEdit().setVisible(True)
        self.enddate.setMinimumDate(QtCore.QDate.fromString(self.startdate.date().toString('yyyy-MM-dd'), 'yyyy-MM-dd'))

    def showAlloutapply_table(self):
        com_id=self.getcom_id()

        dep_list = findAlloutApply(com_id)

        self.tableWidget.setRowCount(len(dep_list))
        x = 0
        for onedep in dep_list:
            if onedep[5]==1:
                iscope=False
            else:
                iscope=True
            self.tableWidget.setCellWidget(x, 0, self.buttonForRow(iscope))
            for y in range(len(onedep)):
                if y<3:
                    item=QtWidgets.QTableWidgetItem(str(onedep[y]))
                    item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                    self.tableWidget.setItem(x, y + 1, item)
                elif y>3:
                    if y==5:
                        if onedep[y]==2:
                            state='已同意'
                        elif onedep[y]==3:
                            state='已拒绝'
                        else:
                            state='未处理'
                        item = QtWidgets.QTableWidgetItem(state)
                    else:
                        item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                    item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                    self.tableWidget.setItem(x, y , item)
            x = x + 1

    def buttonForRow(self, iscope):
        widget = QtWidgets.QWidget()
        hLayout = QtWidgets.QHBoxLayout()
        # 修改
        if not iscope:
            self.agreeBtn = QtWidgets.QPushButton('同意')
            self.agreeBtn.setStyleSheet(''' text-align : center;
                                                   background-color : green;
                                                   height : 30px;
                                                   border-style: outset;
                                                   font : 13px  ''')
            self.agreeBtn.clicked.connect(self.AgreeButton)
            # 删除
            self.refuseBtn = QtWidgets.QPushButton('拒绝')
            self.refuseBtn.setStyleSheet(''' text-align : center;
                                             background-color : orange;
                                             height : 30px;
                                             border-style: outset;
                                             font : 13px; ''')

            self.refuseBtn.clicked.connect(self.RefuseButton)
            hLayout.addWidget(self.agreeBtn)
            hLayout.addWidget(self.refuseBtn)
        self.deleteBtn = QtWidgets.QPushButton('移除')
        self.deleteBtn.setStyleSheet(''' text-align : center;
                                                             background-color : LightCoral;
                                                             height : 30px;
                                                             border-style: outset;
                                                             font : 13px; ''')

        self.deleteBtn.clicked.connect(self.DeleteButton)

        hLayout.addWidget(self.deleteBtn)
        hLayout.setContentsMargins(2, 2, 2, 2)

        widget.setLayout(hLayout)
        return widget

    def AgreeButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            onedep = findApplybyEx(self.tableWidget.item(row, 1).text())
            staff = staffFindbyPhone(self.tableWidget.item(row, 2).text(), self.getcom_id())[0]
            dep_id = staff[6]
            if dep_id is not None:
                depart = findDepbyId(dep_id, self.getcom_id())
                begintime = depart[3]
            else:
                begintime = "08:00:00"

            begindate = onedep[6]
            enddate = onedep[7]
            days = (enddate.date() - begindate.date()).days
            print(days)
            attdatetime=[]
            for i in range(days):
                attdatetime.append(str(begindate.date() + datetime.timedelta(days=i)) + " " + str(begintime))

            sign1 = updateAgreeApply(onedep[1], attdatetime, 4,self.gethr_id(),self.tableWidget.item(row, 1).text())

            if sign1 :
                onedep = findApplybyEx(self.tableWidget.item(row, 1).text())
                # print(onedep)
                self.tableWidget.setCellWidget(row, 0, self.buttonForRow(True))
                for y in range(len(onedep)):
                    if y < 3:
                        item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                        self.tableWidget.setItem(row, y + 1, item)
                    elif y > 3:
                        if y == 5:
                            if onedep[y] == 2:
                                state = '已同意'
                            elif onedep[y] == 3:
                                state = '已拒绝'
                            else:
                                state = '未处理'
                            item = QtWidgets.QTableWidgetItem(state)
                        else:
                            item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                        self.tableWidget.setItem(row, y, item)
            else:
                QMessageBox.warning(self, "失败", "外勤同意失败！", QMessageBox.Yes)

    def RefuseButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            sign1 = updateRefuseApply(self.gethr_id(), self.tableWidget.item(row, 1).text())

            if sign1 :
                onedep = findApplybyEx(self.tableWidget.item(row, 1).text())
                #print(onedep)
                self.tableWidget.setCellWidget(row, 0, self.buttonForRow(True))
                for y in range(len(onedep)):
                    if y < 3:
                        item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                        self.tableWidget.setItem(row, y + 1, item)
                    elif y > 3:
                        if y == 5:
                            if onedep[y] == 2:
                                state = '已同意'
                            elif onedep[y] == 3:
                                state = '已拒绝'
                            else:
                                state = '未处理'
                            item = QtWidgets.QTableWidgetItem(state)
                        else:
                            item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                        self.tableWidget.setItem(row, y, item)
            else:
                QMessageBox.warning(self, "失败", "外勤拒绝失败！", QMessageBox.Yes)

    def DeleteButton(self):
        button = self.sender()
        if button:
            res = QMessageBox.question(self, '移除', '确定移除该条记录吗？', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if res == QMessageBox.No:
                return
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            res = deleteApply(self.tableWidget.item(row, 1).text())
            print(res)
            if res:
                self.tableWidget.removeRow(row)
            else:
                print("error delete")

    def resetSelection(self):
        self.startdate.setDate(self.startdate.minimumDate())
        self.startdate.lineEdit().setVisible(False)
        self.enddate.lineEdit().setVisible(False)
        self.comboBox.setCurrentIndex(0)

    def searchfornotext(self):
        com_id=self.getcom_id()
        comboflag=startdateflag=True
        statetxt=self.comboBox.currentText()
        startdate=self.startdate.date().toString("yyyy-MM-dd")
        enddate=self.enddate.date().toString("yyyy-MM-dd")
        if statetxt=="全部":
            comboflag=False
        elif statetxt=="未处理":
            state=1
        elif statetxt=="已同意":
            state=2
        elif statetxt=="已拒绝":
            state=3
        if not self.startdate.lineEdit().isVisible():
            startdateflag=False
        if comboflag and startdateflag:
            startdatetime=startdate+" 00:00:00"
            enddatetime=enddate+" 23:59:59"
            self.showSelectedApply(findApplybyStateandTime(state, startdatetime, enddatetime, com_id))
        elif comboflag and not startdateflag:
            self.showSelectedApply(findApplybyState(state, com_id))
        elif not comboflag and startdateflag:
            startdatetime = startdate + " 00:00:00"
            enddatetime = enddate + " 23:59:59"
            self.showSelectedApply(findApplybyTime(startdatetime, enddatetime, com_id))
        else:
            self.showAlloutapply_table()

    def searchfortext(self):
        com_id=self.getcom_id()
        phone=self.lineEdit.text()
        if phone is None or len(phone)==0:
            print("手机号输入有问题")
        else:
            self.showSelectedApply(findApplybyPhone(phone,com_id))


    def showSelectedApply(self,dep_list):
        self.tableWidget.setRowCount(len(dep_list))
        print(len(dep_list))
        x = 0
        for onedep in dep_list:
            for y in range(len(onedep)):
                if onedep[5] == 1:
                    iscope = False
                else:
                    iscope = True
                self.tableWidget.setCellWidget(x, 0, self.buttonForRow(iscope))

                if y<3:
                    item=QtWidgets.QTableWidgetItem(str(onedep[y]))
                    item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                    self.tableWidget.setItem(x, y + 1, item)
                elif y>3:
                    if y==5:
                        if onedep[y]==2:
                            state='已同意'
                        elif onedep[y]==3:
                            state='已拒绝'
                        else:
                            state='未处理'
                        item = QtWidgets.QTableWidgetItem(state)
                    else:
                        item = QtWidgets.QTableWidgetItem(str(onedep[y]))
                    item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                    self.tableWidget.setItem(x, y , item)
            x = x + 1